name: dctl CI
run-name: ${{ github.actor }} launch dctl tests
on:
  pull_request:
  push:
    branches:
      - main
    tags:
      - '*.*.*'
jobs:
  tests_and_build:
    name: Test and Build dctl
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: "ubuntu-latest"
            target: x86_64-unknown-linux-gnu
          - os: "ubuntu-latest"
            target: x86_64-unknown-linux-musl
          # - os: "macos-latest"
          #   target: [ x86_64-apple-darwin, aarch64-apple-darwin ]
          # - os: "windows-latest"
          #   target: [ x86_64-pc-windows-msvc, x86_64-pc-windows-gnu ]
    steps:
      - uses: actions/checkout@v3
      - name: install rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true
      - name: "Prepare cache"
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
      # Install target
      - name: install target
        run: rustup target add ${{ matrix.target }}
      # Test
      - name: run tests --release
        working-directory: cli
        run: cargo test --release
      # Build only on tag
      - name: run build --release
        working-directory: cli
        run: cargo build --release --target ${{ matrix.target }}
      # Save build
      - name: Tar files
        working-directory: cli
        run: tar -cvf dctl-${{ matrix.os }}-${{ matrix.target }}.tar target/${{ matrix.target }}/release/dctl*
      - name: save compressed build
        uses: actions/upload-artifact@v3
        with:
          name: dctl-artifact
          path: cli/dctl.*.tar
          retention-days: 1
  
  release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: tests_and_build
    steps:
      - uses: actions/checkout@v3
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # This token is provided by Actions, you do not need to create your own token
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          draft: if ${{ github.event_name == 'pull_request' }} then true else false
          prerelease: if ${{ startsWith(github.ref, 'refs/tags/rc*') }} then true else false

  upload_artifacts:
    name: Upload Release Assets
    runs-on: "ubuntu-latest"
    needs: release
    steps:
      - name: Download Release Asset
        uses: actions/download-artifact@v3
        with:
          name: dctl-artifact
      - name: find dctl-artifact
        run: find . -name dctl*.tar
      - name: Upload Release Assets
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps
          asset_path: cli/dctl.*.tar
          asset_content_type: application/octet-stream
