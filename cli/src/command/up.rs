use clap::{Arg, Command, ArgAction};

pub fn compose_up() -> Command {
    Command::new("up")
        .about("Create and start containers for a project.")
        .arg(
            Arg::new("PROJECT")
                .help("The name of the docker-compose file alias")
                .required(true),
        )
        .arg(
            Arg::new("ABORT_ON_CONTAINER_EXIT")
                .help("Stops all containers if any container was stopped. Incompatible with -d")
                .long("abort-on-container-exit")
                .action(ArgAction::SetTrue)
                .conflicts_with("DETACH")
        )
        .arg(
            Arg::new("ALWAYS_RECREATE_DEPS")
                .help("Recreate dependent containers. Incompatible with --no-recreate.")
                .long("always-recreate-deps")
                .action(ArgAction::SetTrue)
                .conflicts_with("NO_RECREATE")
        )
        .arg(
            Arg::new("ATTACH")
                .help("Attach to service output")
                .long("attach")
                .action(ArgAction::SetTrue)
        )
        .arg(
            Arg::new("ATTACH_DEPENDENCIES")
                .help("Attach to dependent containers.")
                .long("attach-dependencies")
                .action(ArgAction::SetTrue)
        )
        .arg(
            Arg::new("BUILD")
                .help("Build images before starting containers.")
                .long("build")
                .action(ArgAction::SetTrue)
        )
        .arg(
            Arg::new("DETACH")
                .help("Detached mode: Run containers in the background")
                .long("detach")
                .short('d')
                .action(ArgAction::SetTrue)
        )
        .arg(
            Arg::new("EXIT_CODE_FROM")
                .help("Return the exit code of the selected service container. Implies --abort-on-container-exit")
                .long("exit-code-from")
                .action(ArgAction::SetTrue)
        )
        .arg(
            Arg::new("FORCE_RECREATE")
                .help("Recreate containers even if their configuration and image haven't changed.")
                .long("force-recreate")
                .action(ArgAction::SetTrue)
        )
        .arg(
            Arg::new("NO_ATTTACH")
                .help("Don't attach to specified service.")
                .long("no-attach")
                .action(ArgAction::SetTrue)
        )
        .arg(
            Arg::new("NO_BUILD")
                .help("Don't build an image, even if it's missing.")
                .long("no-build")
                .action(ArgAction::SetTrue)
        )
        .arg(
            Arg::new("NO_COLOR")
                .help("Produce monochrome output.")
                .long("no-color")
                .action(ArgAction::SetTrue)
        )
        .arg(
            Arg::new("NO_DEPS")
                .help("Don't start linked services.")
                .long("no-deps")
                .action(ArgAction::SetTrue)
        )
        .arg(
            Arg::new("NO_LOG_PREFIX")
                .help("Don't print prefix in logs.")
                .long("no-log-prefix")
                .action(ArgAction::SetTrue)
        )
        .arg(
            Arg::new("NO_RECREATE")
                .help("If containers already exist, don't recreate them. Incompatible with --force-recreate and --always-recreate-deps.")
                .long("no-recreate")
                .action(ArgAction::SetTrue)
                .conflicts_with("FORCE_RECREATE")
                .conflicts_with("ALWAYS_RECREATE_DEPS")
        )
        .arg(
            Arg::new("NO_START")
                .help("Don't start the services after creating them.")
                .long("no-start")
                .action(ArgAction::SetTrue)
        )
        .arg(
            Arg::new("PULL")
                .help("Pull image before running")
                .long("pull")
                .value_parser(["always", "missing", "never"])
        )
        .arg(
            Arg::new("QUIET_PULL")
                .help("Pull without printing progress information.")
                .long("quiet-pull")
                .action(ArgAction::SetTrue)
        )
        .arg(
            Arg::new("REMOVE_ORPHANS")
                .help("Remove containers for services not defined in the Compose file.")
                .long("remove-orphans")
                .action(ArgAction::SetTrue)
        )
        .arg(
            Arg::new("RENEW_ANON_VOLUMES")
                .help("Recreate anonymous volumes instead of retrieving data from the previous containers.")
                .long("renew-anon-volumes")
                .action(ArgAction::SetTrue)
        )
        .arg(
            Arg::new("SCALE")
                .help("Scale SERVICE to NUM instances. Overrides the scale setting in the Compose file if present.")
                .long("scale")
                .value_names(&["SERVICE", "NUM"])
        )
        .arg(
            Arg::new("TIMEOUT")
                .help("Use this timeout in seconds for container shutdown when attached or when containers are already running.")
                .long("timeout")
                .short('t')
        )
        .arg(
            Arg::new("TIMESTAMPS")
                .help("Show timestamps.")
                .long("timestamps")
                .action(ArgAction::SetTrue)
        )
        .arg(
            Arg::new("WAIT")
                .help("Wait for services to be running|healthy. Implies detached mode.")
                .long("wait")
                .action(ArgAction::SetTrue)
        )
}